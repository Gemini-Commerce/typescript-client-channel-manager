/* tslint:disable */
/* eslint-disable */
/**
 * Channel Manager Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChannelmanagerAssociationResponse,
  ChannelmanagerChannelResponse,
  ChannelmanagerChannelResponseWithAssociations,
  ChannelmanagerCreateAssociationRequest,
  ChannelmanagerCreateChannelRequest,
  ChannelmanagerCreateMarketRequest,
  ChannelmanagerDeleteAssociationRequest,
  ChannelmanagerDeleteChannelRequest,
  ChannelmanagerDeleteMarketRequest,
  ChannelmanagerGetChannelRequest,
  ChannelmanagerGetChannelWithAssociationsRequest,
  ChannelmanagerGetMarketRequest,
  ChannelmanagerGetMarketWithAssociationsRequest,
  ChannelmanagerListChannelsRequest,
  ChannelmanagerListChannelsResponse,
  ChannelmanagerListChannelsWithAssociationsRequest,
  ChannelmanagerListChannelsWithAssociationsResponse,
  ChannelmanagerListMarketsRequest,
  ChannelmanagerListMarketsResponse,
  ChannelmanagerListMarketsWithAssociationsRequest,
  ChannelmanagerListMarketsWithAssociationsResponse,
  ChannelmanagerMarketResponse,
  ChannelmanagerMarketResponseWithAssociations,
  ChannelmanagerUpdateChannelRequest,
  ChannelmanagerUpdateMarketRequest,
  RpcStatus,
} from '../models/index';
import {
    ChannelmanagerAssociationResponseFromJSON,
    ChannelmanagerAssociationResponseToJSON,
    ChannelmanagerChannelResponseFromJSON,
    ChannelmanagerChannelResponseToJSON,
    ChannelmanagerChannelResponseWithAssociationsFromJSON,
    ChannelmanagerChannelResponseWithAssociationsToJSON,
    ChannelmanagerCreateAssociationRequestFromJSON,
    ChannelmanagerCreateAssociationRequestToJSON,
    ChannelmanagerCreateChannelRequestFromJSON,
    ChannelmanagerCreateChannelRequestToJSON,
    ChannelmanagerCreateMarketRequestFromJSON,
    ChannelmanagerCreateMarketRequestToJSON,
    ChannelmanagerDeleteAssociationRequestFromJSON,
    ChannelmanagerDeleteAssociationRequestToJSON,
    ChannelmanagerDeleteChannelRequestFromJSON,
    ChannelmanagerDeleteChannelRequestToJSON,
    ChannelmanagerDeleteMarketRequestFromJSON,
    ChannelmanagerDeleteMarketRequestToJSON,
    ChannelmanagerGetChannelRequestFromJSON,
    ChannelmanagerGetChannelRequestToJSON,
    ChannelmanagerGetChannelWithAssociationsRequestFromJSON,
    ChannelmanagerGetChannelWithAssociationsRequestToJSON,
    ChannelmanagerGetMarketRequestFromJSON,
    ChannelmanagerGetMarketRequestToJSON,
    ChannelmanagerGetMarketWithAssociationsRequestFromJSON,
    ChannelmanagerGetMarketWithAssociationsRequestToJSON,
    ChannelmanagerListChannelsRequestFromJSON,
    ChannelmanagerListChannelsRequestToJSON,
    ChannelmanagerListChannelsResponseFromJSON,
    ChannelmanagerListChannelsResponseToJSON,
    ChannelmanagerListChannelsWithAssociationsRequestFromJSON,
    ChannelmanagerListChannelsWithAssociationsRequestToJSON,
    ChannelmanagerListChannelsWithAssociationsResponseFromJSON,
    ChannelmanagerListChannelsWithAssociationsResponseToJSON,
    ChannelmanagerListMarketsRequestFromJSON,
    ChannelmanagerListMarketsRequestToJSON,
    ChannelmanagerListMarketsResponseFromJSON,
    ChannelmanagerListMarketsResponseToJSON,
    ChannelmanagerListMarketsWithAssociationsRequestFromJSON,
    ChannelmanagerListMarketsWithAssociationsRequestToJSON,
    ChannelmanagerListMarketsWithAssociationsResponseFromJSON,
    ChannelmanagerListMarketsWithAssociationsResponseToJSON,
    ChannelmanagerMarketResponseFromJSON,
    ChannelmanagerMarketResponseToJSON,
    ChannelmanagerMarketResponseWithAssociationsFromJSON,
    ChannelmanagerMarketResponseWithAssociationsToJSON,
    ChannelmanagerUpdateChannelRequestFromJSON,
    ChannelmanagerUpdateChannelRequestToJSON,
    ChannelmanagerUpdateMarketRequestFromJSON,
    ChannelmanagerUpdateMarketRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface ChannelManagerCreateAssociationRequest {
    body: ChannelmanagerCreateAssociationRequest;
}

export interface ChannelManagerCreateChannelRequest {
    body: ChannelmanagerCreateChannelRequest;
}

export interface ChannelManagerCreateMarketRequest {
    body: ChannelmanagerCreateMarketRequest;
}

export interface ChannelManagerDeleteAssociationRequest {
    body: ChannelmanagerDeleteAssociationRequest;
}

export interface ChannelManagerDeleteChannelRequest {
    body: ChannelmanagerDeleteChannelRequest;
}

export interface ChannelManagerDeleteMarketRequest {
    body: ChannelmanagerDeleteMarketRequest;
}

export interface ChannelManagerGetChannelRequest {
    body: ChannelmanagerGetChannelRequest;
}

export interface ChannelManagerGetChannelWithAssociationsRequest {
    body: ChannelmanagerGetChannelWithAssociationsRequest;
}

export interface ChannelManagerGetMarketRequest {
    body: ChannelmanagerGetMarketRequest;
}

export interface ChannelManagerGetMarketWithAssociationsRequest {
    body: ChannelmanagerGetMarketWithAssociationsRequest;
}

export interface ChannelManagerListChannelsRequest {
    body: ChannelmanagerListChannelsRequest;
}

export interface ChannelManagerListChannelsWithAssociationsRequest {
    body: ChannelmanagerListChannelsWithAssociationsRequest;
}

export interface ChannelManagerListMarketsRequest {
    body: ChannelmanagerListMarketsRequest;
}

export interface ChannelManagerListMarketsWithAssociationsRequest {
    body: ChannelmanagerListMarketsWithAssociationsRequest;
}

export interface ChannelManagerUpdateChannelRequest {
    body: ChannelmanagerUpdateChannelRequest;
}

export interface ChannelManagerUpdateMarketRequest {
    body: ChannelmanagerUpdateMarketRequest;
}

/**
 * 
 */
export class ChannelManagerApi extends runtime.BaseAPI {

    /**
     * Create a new association between a channel and a market or entities
     * CreateAssociation
     */
    async channelManagerCreateAssociationRaw(requestParameters: ChannelManagerCreateAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerAssociationResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerCreateAssociation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/CreateAssociation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerCreateAssociationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerAssociationResponseFromJSON(jsonValue));
    }

    /**
     * Create a new association between a channel and a market or entities
     * CreateAssociation
     */
    async channelManagerCreateAssociation(requestParameters: ChannelManagerCreateAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerAssociationResponse> {
        const response = await this.channelManagerCreateAssociationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new channel
     * CreateChannel
     */
    async channelManagerCreateChannelRaw(requestParameters: ChannelManagerCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerChannelResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerCreateChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/CreateChannel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerCreateChannelRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerChannelResponseFromJSON(jsonValue));
    }

    /**
     * Create a new channel
     * CreateChannel
     */
    async channelManagerCreateChannel(requestParameters: ChannelManagerCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerChannelResponse> {
        const response = await this.channelManagerCreateChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new market
     * CreateMarket
     */
    async channelManagerCreateMarketRaw(requestParameters: ChannelManagerCreateMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerMarketResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerCreateMarket.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/CreateMarket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerCreateMarketRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerMarketResponseFromJSON(jsonValue));
    }

    /**
     * Create a new market
     * CreateMarket
     */
    async channelManagerCreateMarket(requestParameters: ChannelManagerCreateMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerMarketResponse> {
        const response = await this.channelManagerCreateMarketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing association between a channel and a market or entities
     * DeleteAssociation
     */
    async channelManagerDeleteAssociationRaw(requestParameters: ChannelManagerDeleteAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerDeleteAssociation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/DeleteAssociation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerDeleteAssociationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an existing association between a channel and a market or entities
     * DeleteAssociation
     */
    async channelManagerDeleteAssociation(requestParameters: ChannelManagerDeleteAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.channelManagerDeleteAssociationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Soft delete an existing channel
     * DeleteChannel
     */
    async channelManagerDeleteChannelRaw(requestParameters: ChannelManagerDeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerDeleteChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/DeleteChannel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerDeleteChannelRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Soft delete an existing channel
     * DeleteChannel
     */
    async channelManagerDeleteChannel(requestParameters: ChannelManagerDeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.channelManagerDeleteChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Soft delete an existing market
     * DeleteMarket
     */
    async channelManagerDeleteMarketRaw(requestParameters: ChannelManagerDeleteMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerDeleteMarket.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/DeleteMarket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerDeleteMarketRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Soft delete an existing market
     * DeleteMarket
     */
    async channelManagerDeleteMarket(requestParameters: ChannelManagerDeleteMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.channelManagerDeleteMarketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing channel
     * GetChannel
     */
    async channelManagerGetChannelRaw(requestParameters: ChannelManagerGetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerChannelResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerGetChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/GetChannel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerGetChannelRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerChannelResponseFromJSON(jsonValue));
    }

    /**
     * Get an existing channel
     * GetChannel
     */
    async channelManagerGetChannel(requestParameters: ChannelManagerGetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerChannelResponse> {
        const response = await this.channelManagerGetChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing channel with associations
     * GetChannelWithAssociations
     */
    async channelManagerGetChannelWithAssociationsRaw(requestParameters: ChannelManagerGetChannelWithAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerChannelResponseWithAssociations>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerGetChannelWithAssociations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/GetChannelWithAssociations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerGetChannelWithAssociationsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerChannelResponseWithAssociationsFromJSON(jsonValue));
    }

    /**
     * Get an existing channel with associations
     * GetChannelWithAssociations
     */
    async channelManagerGetChannelWithAssociations(requestParameters: ChannelManagerGetChannelWithAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerChannelResponseWithAssociations> {
        const response = await this.channelManagerGetChannelWithAssociationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing market
     * GetMarket
     */
    async channelManagerGetMarketRaw(requestParameters: ChannelManagerGetMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerMarketResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerGetMarket.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/GetMarket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerGetMarketRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerMarketResponseFromJSON(jsonValue));
    }

    /**
     * Get an existing market
     * GetMarket
     */
    async channelManagerGetMarket(requestParameters: ChannelManagerGetMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerMarketResponse> {
        const response = await this.channelManagerGetMarketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing market with associations
     * GetMarketWithAssociations
     */
    async channelManagerGetMarketWithAssociationsRaw(requestParameters: ChannelManagerGetMarketWithAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerMarketResponseWithAssociations>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerGetMarketWithAssociations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/GetMarketWithAssociations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerGetMarketWithAssociationsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerMarketResponseWithAssociationsFromJSON(jsonValue));
    }

    /**
     * Get an existing market with associations
     * GetMarketWithAssociations
     */
    async channelManagerGetMarketWithAssociations(requestParameters: ChannelManagerGetMarketWithAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerMarketResponseWithAssociations> {
        const response = await this.channelManagerGetMarketWithAssociationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all channels
     * ListChannels
     */
    async channelManagerListChannelsRaw(requestParameters: ChannelManagerListChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerListChannelsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerListChannels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/ListChannels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerListChannelsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerListChannelsResponseFromJSON(jsonValue));
    }

    /**
     * List all channels
     * ListChannels
     */
    async channelManagerListChannels(requestParameters: ChannelManagerListChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerListChannelsResponse> {
        const response = await this.channelManagerListChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all channels with associations
     * ListChannelsWithAssociations
     */
    async channelManagerListChannelsWithAssociationsRaw(requestParameters: ChannelManagerListChannelsWithAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerListChannelsWithAssociationsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerListChannelsWithAssociations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/ListChannelsWithAssociations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerListChannelsWithAssociationsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerListChannelsWithAssociationsResponseFromJSON(jsonValue));
    }

    /**
     * List all channels with associations
     * ListChannelsWithAssociations
     */
    async channelManagerListChannelsWithAssociations(requestParameters: ChannelManagerListChannelsWithAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerListChannelsWithAssociationsResponse> {
        const response = await this.channelManagerListChannelsWithAssociationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all markets
     * ListMarkets
     */
    async channelManagerListMarketsRaw(requestParameters: ChannelManagerListMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerListMarketsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerListMarkets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/ListMarkets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerListMarketsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerListMarketsResponseFromJSON(jsonValue));
    }

    /**
     * List all markets
     * ListMarkets
     */
    async channelManagerListMarkets(requestParameters: ChannelManagerListMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerListMarketsResponse> {
        const response = await this.channelManagerListMarketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all markets with associations
     * ListMarketsWithAssociations
     */
    async channelManagerListMarketsWithAssociationsRaw(requestParameters: ChannelManagerListMarketsWithAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerListMarketsWithAssociationsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerListMarketsWithAssociations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/ListMarketsWithAssociations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerListMarketsWithAssociationsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerListMarketsWithAssociationsResponseFromJSON(jsonValue));
    }

    /**
     * List all markets with associations
     * ListMarketsWithAssociations
     */
    async channelManagerListMarketsWithAssociations(requestParameters: ChannelManagerListMarketsWithAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerListMarketsWithAssociationsResponse> {
        const response = await this.channelManagerListMarketsWithAssociationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing channel
     * UpdateChannel
     */
    async channelManagerUpdateChannelRaw(requestParameters: ChannelManagerUpdateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerChannelResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerUpdateChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/UpdateChannel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerUpdateChannelRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerChannelResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing channel
     * UpdateChannel
     */
    async channelManagerUpdateChannel(requestParameters: ChannelManagerUpdateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerChannelResponse> {
        const response = await this.channelManagerUpdateChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing market
     * UpdateMarket
     */
    async channelManagerUpdateMarketRaw(requestParameters: ChannelManagerUpdateMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelmanagerMarketResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling channelManagerUpdateMarket.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/channelmanager.ChannelManager/UpdateMarket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelmanagerUpdateMarketRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelmanagerMarketResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing market
     * UpdateMarket
     */
    async channelManagerUpdateMarket(requestParameters: ChannelManagerUpdateMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelmanagerMarketResponse> {
        const response = await this.channelManagerUpdateMarketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
